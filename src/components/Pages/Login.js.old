import React, { useState, useContext } from 'react'
import { StyledContent, Heading, MediumSpace } from '../../styles/PageStyles'
import auth from '../../auth/auth'
import { Redirect } from 'react-router-dom'
import { Autoreply } from '../../styles/FormStyles'
import FacebookLogin from 'react-facebook-login'
import GoogleLogin from 'react-google-login'
import { UserContext } from '../../context/UserContext'
import { getLocalStorage, setLocalStorage } from '../../utilities/LocalStorage'
import { Mutation } from 'react-apollo'
import gql from 'graphql-tag'

export const Login = ({ lesson = null }) => {

  const { user, setUser } = useContext(UserContext);
  const [account, setAccount] = useState(null);

  const [redirect, setRedirect] = useState();
  const [classFull, setClassFull] = useState(false);

  function loginUser(profile, addAccount) {

    setClassFull(false);  // To Display the message TODO create messaging system

    if (lesson) {
      if (lesson.students < lesson.maxStudents) {
        profile.type = "student";
        enrollStudent(profile);
      } else {
        setClassFull(true);
        return false;
      }
    }

    setUser(profile);
    setAccount(profile).then(() => {
      // Add's user to database
      addAccount();  // Calls the mutation

      auth.login(profile).then(() => {
        // Redirect
        setRedirect(true);
      });
    });

  }

  function checkUserExists() {
    // Make call to the database to see if the user already exists.
  }

  function enrollStudent(profile) {
    // TODO send mutation to add user to the lesson.
    let lessons = getLocalStorage("lessons")

    let newLessons = JSON.stringify(lessons.map(l => {
      if (l.lessonId === lesson.lessonId) {
        return {
          ...l,
          students: [
            ...l.students || [],
            profile
          ]
        }
      } else {
        return l
      }
    }));

    setLocalStorage("lessons", newLessons)

  }

  const responseFacebook = (data, addAccount) => {
    const { email, name, picture, id } = data;
    let nameSplit = name.split(" ");

    user = {
      id: id,
      accountId: id,
      nameFirst: nameSplit[0] ? nameSplit[0] : '',
      nameLast: nameSplit[nameSplit.length] ? nameSplit[nameSplit.length] : '',
      email: email,
      type: 'educator',
      image: picture.data.url
    }

    loginUser(user, addAccount);
  }

  const responseGoogle = (response, addAccount) => {
    const profileObj = response.profileObj;

    const user = {
      id: profileObj.googleId,
      accountId: profileObj.googleId,
      nameFirst: profileObj.givenName,
      nameLast: profileObj.familyName,
      email: profileObj.email,
      type: 'administrator',
      image: profileObj.imageUrl
    };

    loginUser(user, addAccount);
  }

  return (
    <Mutation
      mutation={NEW_ACCOUNT}
      variables={{
        email: account ? account.email : 'dummy',
        nameLast: account ? account.nameLast : '',
        nameFirst: account ? account.nameFirst : '',
        type: account ? account.type : '',
        accountId: account ? account.accountId : ''
      }}
    >
      {createAccount => (
        <StyledContent>
          <Heading>
            <h1>Login</h1>
          </Heading>
          {classFull && (
            <Autoreply
              className="error"
              initial={{ height: 0 }}
              animate={{ height: "auto" }}
            >
              <p><strong>LESSON FULL</strong></p>
              <p>Sorry, this lesson is full. Please contact your teacher for assistance.</p>
            </Autoreply>
          )}
          {lesson && (
            <MediumSpace>
              <p>Please login with Google or Facebook to enroll yourself in <strong>{lesson.title}</strong>.</p>
            </MediumSpace>
          )}
          <FacebookLogin
            appId="665758824197396"
            fields="name,email,picture"
            callback={() => responseFacebook(createAccount)}
          />
          <br />
          <br />
          <GoogleLogin
            clientId="898142775962-ib0uaie5botfugao80pjjn9nae1387fl.apps.googleusercontent.com"
            buttonText="LOGIN WITH GOOGLE"
            onSuccess={(response) => responseGoogle(response, createAccount)}
            onFailure={(response) => console.log(response)}
          />
          {redirect && <Redirect to="/profile" />}
        </StyledContent>
      )}
    </Mutation>
  )
}

export default Login;

const NEW_ACCOUNT = gql`
mutation createAccount($email: String!,$nameFirst: String!,$nameLast: String!,$type: String!,$accountId: String!) {
  createAccount(data: {
    status: PUBLISHED
    email: $email
    nameFirst: $nameFirst
    nameLast: $nameLast
    type: $type
    accountId: $accountId
  }) {
    id
    nameFirst
    nameLast
    email
    type
    accountId
  }
}
`